#!/bin/bash
bold=$(tput bold)
_bold=$(tput sgr0)

SYS_URL='http://localhost:8080'

APP_YAML=app.yaml
FRONTEND_YAML=frontend/frontend.yaml
BACKEND_YAML=backend/backend.yaml
WORKER_YAML=backend/worker.yaml
SUPPORT_YAML=support/support.yaml

BACKEND_LOCAL="localhost:8082"

LANDINGPAGE_LOCAL="localhost:8080"

FRONTEND_CONFIG_FILE="frontend/config.js"
SUPPORT_CONFIG_FILE="support/config.js"

git update-index --skip-worktree $FRONTEND_CONFIG_FILE $SUPPORT_CONFIG_FILE

PY_ENV=backend/py_env

# Receive as a paramameter 'production' or 'development'
function setup_firebase_config {
    echo ">> Setting up Firebase configuration"

    ECIS_CONFIG_FOLDER="$HOME/ecis-config/$1"

    FIREBASE_CONFIG_FILE="$ECIS_CONFIG_FOLDER/firebase-config.js"

    FIREBASE_BACKEND_CONFIG_FILE="$ECIS_CONFIG_FOLDER/firebase_config.py"

    export GOOGLE_APPLICATION_CREDENTIALS="$ECIS_CONFIG_FOLDER/firebase-private-key.json"

    echo $GOOGLE_APPLICATION_CREDENTIALS

    cp $FIREBASE_CONFIG_FILE frontend/
    cp $FIREBASE_CONFIG_FILE support/
    cp $FIREBASE_BACKEND_CONFIG_FILE backend/
}

function set_backend_url {
    if [ -z $1 ]; then
        url="http://$BACKEND_DOMAIN"
    else
        url="http://"$1
    fi
    sed -i "4s|.*|    BACKEND_URL: '$url',|" $FRONTEND_CONFIG_FILE
    echo ">> Frontend will use ${bold}$url${_bold} as backend."
    sed -i "4s|.*|    BACKEND_URL: '$url',|" $SUPPORT_CONFIG_FILE
    echo ">> Support will use ${bold}$url${_bold} as backend."
}

function set_landingpage_url {
    if [ -z $1 ]; then
        url="http://$DOMAIN"
    else
        url="http://"$1
    fi
    sed -i "5s|.*|    LANDINGPAGE_URL: '$url',|" $FRONTEND_CONFIG_FILE
    echo ">> Frontend will use ${bold}$url${_bold} as landing page."
    sed -i "5s|.*|    LANDINGPAGE_URL: '$url',|" $SUPPORT_CONFIG_FILE
    echo ">> Support will use ${bold}$url${_bold} as landing page."
}

case "$1" in
    run)
        APP_VERSION=$(git branch | grep "*" | tr -d "()*" | cut -c2-)
        sed -i "6s|.*|    APP_VERSION: '$APP_VERSION'|" $FRONTEND_CONFIG_FILE
        sed -i "6s|.*|    APP_VERSION: '$APP_VERSION'|" $SUPPORT_CONFIG_FILE

        echo "=========== Cleaning Environment ==========="
        rm -rf $PY_ENV
        rm -rf frontend/test/node_modules frontend/test/bower_components

        echo "=========== Starting Virtual Environment ==========="
        virtualenv $PY_ENV
        source $PY_ENV/bin/activate

        echo "=========== Installing Dependencies ==========="
        python -m pip install -r backend/requirements.txt

        touch .env_cleaned # Flag to the test script knows that the env was cleaned

        if which xdg-open > /dev/null
        then
          xdg-open $SYS_URL
        elif which gnome-open > /dev/null
        then
          gnome-open $SYS_URL
        fi

        echo "=========== Starting Microservices ==========="
        setup_firebase_config development

        set_backend_url $BACKEND_LOCAL

        set_landingpage_url $LANDINGPAGE_LOCAL

        dev_appserver.py $APP_YAML $FRONTEND_YAML $BACKEND_YAML $SUPPORT_YAML $WORKER_YAML $2
    ;;

    test)
        case "$2" in
            client)
                echo "=========== Starting Fronted Tests ==========="
                cd frontend/test
                
                if [ ! -e node_modules ]; then
                    npm install
                fi

                if [ ! -e bower_components ]; then
                    bower install
                fi

                karma start --single-run
            ;;

            server)
                if [ "$3" == "--clean" ]; then
                    ./setup_env_test clean
                else
                    ./setup_env_test
                fi

                if [ $? != 0 ]; then # Verify the last script output looking for an error
                    exit 1 # Stop the script execution
                fi
                echo "=========== Starting Backend Tests ==========="
                source $PY_ENV/bin/activate
                cd backend
                TEST_NAME="*test.py"
                if [ "$3" == "--name" ] && [ ! -z "$4" ]; then
                    TEST_NAME=$4
                fi
                python -m unittest discover -v -p $TEST_NAME
        esac
    ;;

    deploy)
        APP_VERSION=$(git tag | sort -V | tail -1)
        read -p ">> Type de APP VERSION or use the ${bold}Latest${_bold} ${bold}$APP_VERSION${_bold}: " NEW_APP_VERSION
        if [ "$NEW_APP_VERSION" != "" ]; then
            APP_VERSION=$NEW_APP_VERSION
        fi
        git checkout tags/"$APP_VERSION"
        sed -i "6s|.*|    APP_VERSION: '$APP_VERSION'|" $FRONTEND_CONFIG_FILE
        sed -i "6s|.*|    APP_VERSION: '$APP_VERSION'|" $SUPPORT_CONFIG_FILE

        echo "${bold}>> Select the application to deploy:${_bold}"
        options=("development-cis" "eciis-splab" "Other")
        select opt in "${options[@]}"
        do
            case $opt in
                "development-cis")
                    APP_NAME="development-cis"
                    break
                    ;;
                "eciis-splab")
                    APP_NAME="eciis-splab"
                    break
                    ;;
                "Other")
                    read -p "${bold}>> Type the app name:${_bold} " APP_NAME
                    break
                    ;;
                *) echo invalid option;;
            esac
        done

        gcloud config set project $APP_NAME

        echo "${bold}>> Deploy will use the following GCloud configuration${_bold}"
        gcloud config list

        read -p "${bold}Is everything correct (Y/n)?${_bold} " ANSWER

        if [ "$ANSWER" != "n" ]; then
            echo "Yes"
        else
            exit 1
        fi

        DOMAIN="$APP_NAME.appspot.com"

        BACKEND_DOMAIN="backend.$DOMAIN"
        
        echo "=========== Starting Google App Engine Deployment ==========="

        if [ ! -z $2 ]; then
            version=$2
            url=$version"."$BACKEND_DOMAIN
            set_backend_url $url

            url=$version"."$DOMAIN
            set_landingpage_url $url

            read -p "${bold}Choose which environment to use: (development) ${_bold} " ENVIRONMENT 
            setup_firebase_config $ENVIRONMENT

            if [ ! -z $3 ]; then # Especified one or more yaml configuration files
                gcloud app deploy --version $version --no-promote $3
            else
                gcloud app deploy --version $version --no-promote $APP_YAML $FRONTEND_YAML $BACKEND_YAML $SUPPORT_YAML $WORKER_YAML queue.yaml
            fi
        else
            set_backend_url
            set_landingpage_url
            gcloud app deploy $APP_YAML $FRONTEND_YAML $BACKEND_YAML $SUPPORT_YAML $WORKER_YAML
        fi

        exit 0
        ;;

    *)
        echo "$1 is not a ecis command."
        echo "Usage: $0 {run|test|deploy}"
        exit 1
esac
