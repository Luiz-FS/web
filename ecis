#!/bin/bash
# --- BASH CONSTANTS ---------
bold=$(tput bold)
_bold=$(tput sgr0)
red=$(tput setaf 1)
green=$(tput setaf 2)
reset=$(tput sgr0)
# ----------------------------

SYS_URL='http://localhost:8080'

APP_YAML=app.yaml
FRONTEND_YAML=frontend/frontend.yaml
BACKEND_YAML=backend/backend.yaml
WORKER_YAML=backend/worker.yaml
SUPPORT_YAML=support/support.yaml

LANDINGPAGE_LOCAL="localhost:8080"
FRONTEND_LOCAL="localhost:8081"
BACKEND_LOCAL="localhost:8082"
SUPPORT_LOCAL="localhost:8083"

FRONTEND_CONFIG_FILE="frontend/config.js"
SUPPORT_CONFIG_FILE="support/config.js"
LANDINGPAGE_CONFIG_FILE="landing/config.js"
SW_FILE="frontend/sw.js"

git update-index --skip-worktree $FRONTEND_CONFIG_FILE $SUPPORT_CONFIG_FILE $LANDINGPAGE_CONFIG_FILE

PY_ENV=backend/py_env

# Receive as a paramameter 'production' or 'development'
function setup_firebase_config {
    echo ">> Setting up Firebase configuration to $1 mode"

    ECIS_CONFIG_FOLDER="$HOME/ecis-config/$1"

    FIREBASE_CONFIG_FILE="$ECIS_CONFIG_FOLDER/firebase-config.js"

    FIREBASE_BACKEND_CONFIG_FILE="$ECIS_CONFIG_FOLDER/firebase_config.py"

    export GOOGLE_APPLICATION_CREDENTIALS="$ECIS_CONFIG_FOLDER/firebase-private-key.json"

    cp $FIREBASE_CONFIG_FILE frontend/
    catch_error $? "Firebase on Frontend ok"
    cp $FIREBASE_CONFIG_FILE support/
    catch_error $? "Firebase on Support ok"
    cp $FIREBASE_BACKEND_CONFIG_FILE backend/
    catch_error $? "Firebase on Backend ok"
}

function setup_app_version {
    APP_VERSION_FILE="backend/app_version.py"
    echo 'APP_VERSION = "'$1'"' > $APP_VERSION_FILE
    catch_error $? "Setup APP VERSION with success"
}

function set_service_url {
    case "$1" in
        local)
            echo "http://$2";
        ;;
        deploy)
            echo "https://$2"
        ;;
        *) echo "inv√°lid option"; exit 1;
        ;;
    esac
}

function set_config_file {
    line=$1;
    service=$2;
    url=$3;
    service_name=$4;

    sed -i "$line s|.*|    $service: '$url',|" $FRONTEND_CONFIG_FILE
    sed -i "$line s|.*|    $service: '$url',|" $SUPPORT_CONFIG_FILE
    sed -i "$line s|.*|    $service: '$url',|" $LANDINGPAGE_CONFIG_FILE

    catch_error $? "Frontend will use ${bold}$url${_bold} as $service_name."
    catch_error $? "Support will use ${bold}$url${_bold} as $service_name."
}

function set_backend_url {
    url=$(set_service_url $1 $2);
    service="BACKEND_URL";
    line=4;
    service_name="backend";
    set_config_file $line $service $url $service_name; 
}

function set_landingpage_url {
    url=$(set_service_url $1 $2);
    service="LANDINGPAGE_URL";
    line=5;
    service_name="landing page";
    set_config_file $line $service $url $service_name;
}

function set_support_url {
    url=$(set_service_url $1 $2);
    service="SUPPORT_URL";
    line=6;
    service_name="support";
    set_config_file $line $service $url $service_name;
}

function set_frontend_url {
    url=$(set_service_url $1 $2);
    service="FRONTEND_URL";
    line=7;
    service_name="frontend";
    set_config_file $line $service $url $service_name;
}

# Usage [ --error ] <message_to_log>
function log_message {
    if [ "$1" == "--error" ]; then
        echo "${red}[eCIS ERROR]${reset}    $2"
    else
        echo "${green}[eCIS LOG]${reset}    $1"
    fi
}

# Receives two arguments, the first must be the last output of a command ($?),
# and the second, is an optional message to be logged if no errors are found.
function catch_error {
    if [ $1 -ne 0 ]; then
        echo "${red}[eCIS ERROR]${reset} The last command exited with error $1. Fix it then try again!"
        exit 0;
    fi
    if [ ! -z "$2" ]; then
        # Print the message passed as the second parameters
        echo "${green}[eCIS LOG]${reset}    $2"
    else
        echo "${green}[eCIS LOG]${reset}    done"
    fi
}

case "$1" in
    run)
        APP_VERSION=$(git branch | grep "*" | tr -d "()*" | cut -c2-)
        sed -i "8s|.*|    APP_VERSION: '$APP_VERSION'|" $FRONTEND_CONFIG_FILE
        catch_error $? "APP VERSION on Frontend $APP_VERSION"
        sed -i "8s|.*|    APP_VERSION: '$APP_VERSION'|" $SUPPORT_CONFIG_FILE
        catch_error $? "APP VERSION on Support $APP_VERSION"
        sed -i "8s|.*|    APP_VERSION: '$APP_VERSION'|" $LANDINGPAGE_CONFIG_FILE
        catch_error $? "APP VERSION on LandingPage $APP_VERSION"
        sed -i "11s|.*|    const CACHE_SUFIX = '$APP_VERSION';|" $SW_FILE
        catch_error $? "APP VERSION on SW $APP_VERSION"

        echo "=========== Cleaning Environment ==========="
        rm -rf $PY_ENV
        catch_error $? "Removed Pyenv Folder"

        rm -rf frontend/test/node_modules frontend/test/bower_components
        catch_error $? "Removed node_modules and bower_components"

        echo "=========== Starting Virtual Environment ==========="
        virtualenv $PY_ENV
        catch_error $? "Setup Virtual Env"
        source $PY_ENV/bin/activate
        catch_error $? "Activated"

        echo "=========== Installing Dependencies ==========="
        python -m pip install -r backend/requirements.txt

        touch .env_cleaned # Flag to the test script knows that the env was cleaned

        if which xdg-open > /dev/null
        then
          xdg-open $SYS_URL
        elif which gnome-open > /dev/null
        then
          gnome-open $SYS_URL
        fi

        echo "=========== Starting Microservices ==========="
        setup_app_version $APP_VERSION

        setup_firebase_config development

        set_backend_url local $BACKEND_LOCAL
        set_landingpage_url local $LANDINGPAGE_LOCAL
        set_support_url local $SUPPORT_LOCAL
        set_frontend_url local $FRONTEND_LOCAL

        dev_appserver.py $APP_YAML $FRONTEND_YAML $BACKEND_YAML $SUPPORT_YAML $WORKER_YAML $2
    ;;

    test)
        case "$2" in
            client)
                echo "=========== Starting Fronted Tests Setup ==========="
                cd frontend/test
                
                if [ ! -e node_modules ]; then
                    npm install
                    catch_error $? "Node modules installed with success"
                else
                    log_message "Node modules already installed"
                fi

                if [ ! -e bower_components ]; then
                    bower install
                    catch_error $? "Bower modules installed with success"
                else
                    log_message "Bower modules already installed"
                fi

                echo "=========== Starting to run Fronted Tests ==========="
                karma start --single-run
            ;;

            server)
                if [ "$3" == "--clean" ]; then
                    ./setup_env_test clean
                else
                    ./setup_env_test
                fi

                if [ $? != 0 ]; then # Verify the last script output looking for an error
                    exit 1 # Stop the script execution
                fi
                echo "=========== Starting Backend Tests ==========="
                source $PY_ENV/bin/activate
                setup_app_version "master"
                
                cd backend
                echo 'FIREBASE_URL = "FIREBASE_URL"' > firebase_config.py

                TEST_NAME="*test.py"
                if [ "$3" == "--name" ] && [ ! -z "$4" ]; then
                    TEST_NAME=$4
                fi
                python -m unittest discover -v -p $TEST_NAME
        esac
    ;;

    deploy)
        APP_VERSION=$(git tag | sort -V | tail -1)
        read -p ">> Type de APP VERSION or use the ${bold}Latest${_bold} ${bold}$APP_VERSION${_bold}: " NEW_APP_VERSION
        if [ "$NEW_APP_VERSION" != "" ]; then
            APP_VERSION=$NEW_APP_VERSION
        fi
        git checkout tags/"$APP_VERSION"
        catch_error $? "Git checked out to tag $APP_VERSION"

        sed -i "8s|.*|    APP_VERSION: '$APP_VERSION'|" $FRONTEND_CONFIG_FILE
        catch_error $? "APP VERSION on Frontend $APP_VERSION"
        sed -i "8s|.*|    APP_VERSION: '$APP_VERSION'|" $SUPPORT_CONFIG_FILE
        catch_error $? "APP VERSION on Support $APP_VERSION"
        sed -i "8s|.*|    APP_VERSION: '$APP_VERSION'|" $LANDINGPAGE_CONFIG_FILE
        catch_error $? "APP VERSION on LandingPage $APP_VERSION"
        sed -i "11s|.*|    const CACHE_SUFIX = '$APP_VERSION';|" $SW_FILE
        catch_error $? "APP VERSION on SW $APP_VERSION"

        echo "${bold}>> Select the application to deploy:${_bold}"
        options=("development-cis" "eciis-splab" "Other")
        select opt in "${options[@]}"
        do
            case $opt in
                "development-cis")
                    APP_NAME="development-cis"
                    SUPPORT_DOMAIN="support-dot-$APP_NAME.appspot.com"
                    FRONTEND_DOMAIN="frontend-dot-$APP_NAME.appspot.com"
                    break
                    ;;
                "eciis-splab")
                    APP_NAME="eciis-splab"
                    SUPPORT_DOMAIN="support.plataformacis.org"
                    FRONTEND_DOMAIN="frontend.plataformacis.org"
                    break
                    ;;
                "Other")
                    read -p "${bold}>> Type the app name:${_bold} " APP_NAME
                    break
                    ;;
                *) echo invalid option;;
            esac
        done

        gcloud config set project $APP_NAME

        echo "${bold}>> Deploy will use the following GCloud configuration${_bold}"
        gcloud config list
        catch_error $? "GCloud project configured to $APP_NAME"

        read -p "${bold}Is everything correct (Y/n)?${_bold} " ANSWER

        if [ "$ANSWER" != "n" ]; then
            echo "Yes"
        else
            exit 1
        fi

        DOMAIN="$APP_NAME.appspot.com"
        BACKEND_DOMAIN="backend-dot-$DOMAIN"
        
        ENVIRONMENT="development"
        read -p "${bold}Choose which environment to use: (development) ${_bold} " NEW_ENVIRONMENT 
        if [ "$NEW_ENVIRONMENT" != "" ]; then
            ENVIRONMENT=$NEW_ENVIRONMENT
        fi
        setup_firebase_config $ENVIRONMENT
        catch_error $? "Firebase setup with success"

        setup_app_version $APP_VERSION

        echo "=========== Starting Google App Engine Deployment ==========="

        if [ ! -z $2 ]; then
            version=$2
            url=$version"."$BACKEND_DOMAIN
            set_backend_url deploy $url

            url=$version"."$DOMAIN
            set_landingpage_url deploy $url

            url=$version"."$SUPPORT_DOMAIN
            set_support_url deploy $url

            url=$version"."$FRONTEND_DOMAIN
            set_frontend_url deploy $url

            if [ ! -z $3 ]; then # Especified one or more yaml configuration files
                gcloud app deploy --version $version --no-promote $3
            else
                gcloud app deploy --version $version --no-promote $APP_YAML $FRONTEND_YAML $BACKEND_YAML $SUPPORT_YAML $WORKER_YAML queue.yaml
            fi
        else
            set_backend_url deploy $BACKEND_DOMAIN
            set_landingpage_url deploy $DOMAIN
            set_support_url deploy $SUPPORT_DOMAIN
            set_frontend_url deploy $FRONTEND_DOMAIN
            gcloud app deploy $APP_YAML $FRONTEND_YAML $BACKEND_YAML $SUPPORT_YAML $WORKER_YAML
        fi

        exit 0
        ;;
    github-prs)
        python parse_github_prs.py $2
        ;;
    *)
        echo "$1 is not a ecis command."
        echo "Usage: $0 [ run | test | deploy ]"
        echo "- run [ --enable-sendmail ]"
        echo "- test [ server | client ]"
        echo "---- test server [ --name <your_test.py> ]"
        echo "- deploy [ version_name ]"
        exit 1
esac